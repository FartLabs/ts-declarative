import type { Opts } from "oazapfts";
import { generateSource } from "oazapfts";
import type { Class } from "#/lib/declarative/declarative.ts";
import { getPrototypeValue } from "#/lib/declarative/declarative.ts";
import type { ValueOpenAPISpecification } from "#/lib/declarative/common/openapi/specification.ts";

/**
 * createOazapftsClientOf returns the client generated by Oazapfts.
 */
export async function createOazapftsClientOf(
  target: Class,
  options?: OazapftsOptions,
): // deno-lint-ignore no-explicit-any
Promise<any> {
  const sourceCode = await generateOazapftsClientOf(target, options);
  if (sourceCode === undefined) {
    throw new Error("sourceCode is undefined");
  }

  return await import(`data:text/typescript;base64,${btoa(sourceCode)}`);
}

/**
 * generateOazapftsClientOf returns the source code generated by Oazapfts.
 *
 * @example
 * ```ts
 * @standardCreate()
 * @standardGet()
 * @autoSchema()
 * class Person {
 *   public constructor(public name: string) {}
 * }
 *
 * @openapi({ resources: [Person] })
 * class App {}
 *
 * const sourceCode = await generateOazapftsClientOf(App);
 * await Deno.writeTextFile("client.ts", sourceCode);
 * ```
 */
export async function generateOazapftsClientOf(
  target: Class,
  options?: OazapftsOptions,
): Promise<string | undefined> {
  return await generateSource(
    getPrototypeValue<ValueOpenAPISpecification>(target)
      ?.specification as unknown as string,
    options,
  );
}

/**
 * OazapftsOptions is the options for the Oazapfts decorator.
 */
export type OazapftsOptions = Opts;
